version: '3.9'

x-airflow-common:
  &airflow-common
  image: apache/airflow:2.5.0
  volumes:
    - ./opensea-monitor-airflow/dags:${AIRFLOW_HOME}/dags
    - airflow-logs:${AIRFLOW_HOME}/logs
  environment:
    &airflow-common-env
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
    AIRFLOW__CELERY__RESULT_BACKEND: ${AIRFLOW__CELERY__RESULT_BACKEND}
    AIRFLOW__CELERY__BROKER_URL: ${AIRFLOW__CELERY__BROKER_URL}
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
    AIRFLOW_HOME: ${AIRFLOW_HOME}
    AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
    AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES}
    AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
    PYTHONPATH: ${AIRFLOW_PYTHONPATH}

volumes:
  mongo-data:
  postgres-data:
  airflow-logs:

services:
  mongo:
    image: mongo:4.0
    restart: always
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongo admin -u $MONGO_INITDB_ROOT_USERNAME -p $MONGO_INITDB_ROOT_PASSWORD --quiet | grep 1
      interval: 10s
      timeout: 10s
      retries: 3
    volumes:
      - mongo-data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME
      - MONGO_INITDB_ROOT_PASSWORD

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - "8081:8081"
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongo:27017/

  opensea-monitor-api:
    image: openjdk:11
    container_name: opensea-monitor-api
    entrypoint: /opensea-monitor-api/entrypoint.sh
    restart: always
    depends_on:
      mongo:
        condition: service_healthy
    volumes:
      - ./opensea-monitor-api:/opensea-monitor-api
    ports:
      - 4000:8080
    healthcheck:
      test: [ "CMD", "curl", "-f", "localhost:8080/actuator/health" ]
      interval: 20s
      timeout: 5s
      retries: 50 # large interval/retries to account for very long gradle build time if using Apple Silicon
    environment:
      - MONGO_USER
      - MONGO_PASSWORD

  postgres:
    image: postgres:13
    container_name: postgres
    restart: always
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "airflow", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data
#      - ./pg-init-scripts:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGUSER: ${PGUSER}

  airflow-init:
    <<: *airflow-common
    volumes:
      - ./opensea-monitor-airflow/config:${AIRFLOW_HOME}/config
    container_name: airflow-init
    depends_on:
      postgres:
        condition: service_healthy
      opensea-monitor-api:
        condition: service_healthy
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p logs
        airflow db init
        airflow db upgrade
        if [[ $${AIRFLOW_RECREATE_ADMIN_USER,,} == "true" ]]; then
           airflow users  create --role Admin --username ${AIRFLOW_ADMIN_USERNAME} --password ${AIRFLOW_ADMIN_PASSWORD} --email ${AIRFLOW_ADMIN_EMAIL} --firstname ${AIRFLOW_ADMIN_FIRSTNAME} --lastname ${AIRFLOW_ADMIN_LASTNAME}
        fi
        if [[ $${AIRFLOW_UPDATE_CONFIG_VARIABLE,,} == "true" ]]; then
           airflow variables import ${AIRFLOW_HOME}/${AIRFLOW_CONFIG_PATH}
        fi
    environment:
      <<: *airflow-common-env
      AIRFLOW_RECREATE_ADMIN_USER: ${AIRFLOW_RECREATE_ADMIN_USER}
      AIRFLOW_ADMIN_USERNAME: ${AIRFLOW_ADMIN_USERNAME}
      AIRFLOW_ADMIN_PASSWORD: ${AIRFLOW_ADMIN_PASSWORD}
      AIRFLOW_ADMIN_EMAIL: ${AIRFLOW_ADMIN_EMAIL}
      AIRFLOW_ADMIN_FIRSTNAME: ${AIRFLOW_ADMIN_FIRSTNAME}
      AIRFLOW_ADMIN_LASTNAME: ${AIRFLOW_ADMIN_LASTNAME}
      AIRFLOW_UPDATE_CONFIG_VARIABLE: ${AIRFLOW_UPDATE_CONFIG_VARIABLE}
      AIRFLOW_CONFIG_PATH: ${AIRFLOW_CONFIG_PATH}

  redis:
    image: redis:7.0.4
    container_name: redis
    expose:
      - 6379
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    command: webserver
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      <<: *airflow-common-env
    ports:
      - "4444:8080"

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"' ]
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      <<: *airflow-common-env

  airflow-celery-worker:
    <<: *airflow-common
    command: celery worker
    deploy:
      mode: replicated
      replicas: ${AIRFLOW_CELERY_INSTANCES}
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"' ]
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      <<: *airflow-common-env
      AIRFLOW_CELERY_INSTANCES: ${AIRFLOW_CELERY_INSTANCES}